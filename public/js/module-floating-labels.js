(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["module-floating-labels"],{

/***/ "./cartridges/app_accelerator_core/cartridge/client/default/js/modules/module.floating-labels.js":
/*!*******************************************************************************************************!*\
  !*** ./cartridges/app_accelerator_core/cartridge/client/default/js/modules/module.floating-labels.js ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FloatingLabels; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Handles displaying a \"floatingLabel\" label on fields,\n * which changes position when user focuses, changes, or adds input to a field.\n */\nvar FloatingLabels = /*#__PURE__*/function () {\n  function FloatingLabels(query) {\n    _classCallCheck(this, FloatingLabels);\n\n    var formRows = document.querySelectorAll(query);\n    [].forEach.call(formRows, this.setupField.bind(this));\n  }\n\n  _createClass(FloatingLabels, [{\n    key: \"setupField\",\n    value: function setupField(formRow) {\n      var input = formRow.querySelector('input, select');\n      input.addEventListener('focus', this.setFloating.bind(this, formRow));\n      input.addEventListener('input', this.setFloating.bind(this, formRow));\n      input.addEventListener('change', this.toggleFloating.bind(this, input, formRow));\n      input.addEventListener('external:change', this.toggleFloating.bind(this, input, formRow));\n      input.addEventListener('blur', this.toggleFloating.bind(this, input, formRow));\n\n      if (input.value || window.SFRA.supportsPlaceholderShown && input.placeholder && !input.matches(':placeholder-shown')) {\n        this.setFloating(formRow);\n      } //Sets methods on the input field itself.\n\n\n      input.floatingLabel = {\n        setFloating: this.setFloating.bind(this, formRow),\n        unsetFloating: this.unsetFloating.bind(this, formRow),\n        toggleFloating: this.toggleFloating.bind(this, input, formRow)\n      };\n    }\n  }, {\n    key: \"setFloating\",\n    value: function setFloating(formRow) {\n      formRow.classList.add('set--floating-label');\n    }\n  }, {\n    key: \"unsetFloating\",\n    value: function unsetFloating(formRow) {\n      formRow.classList.remove('set--floating-label');\n    }\n  }, {\n    key: \"toggleFloating\",\n    value: function toggleFloating(input, formRow) {\n      formRow = formRow || input.closest('[data-floating-label]');\n\n      if (formRow) {\n        if (input.value.trim()) {\n          this.setFloating(formRow);\n        } else {\n          this.unsetFloating(formRow, input);\n        }\n      }\n    }\n  }]);\n\n  return FloatingLabels;\n}();\n\n\n\n//# sourceURL=webpack:///./cartridges/app_accelerator_core/cartridge/client/default/js/modules/module.floating-labels.js?");

/***/ })

}]);